plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
	id 'org.spongepowered.mixin' version '0.7.+'
	id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: mapping_channel, version: mapping_version
    copyIdeResources = true
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    
    runs {
    	
    	configureEach {
    		property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
			args '-mixin.config=mixins.epicfight.json'
    	}
    	
        client {
            workingDirectory project.file('run')
            property 'forge.enabledGameTestNamespaces', mod_id
			
            mods {
                epicfight {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.enabledGameTestNamespaces', mod_id
			
            mods {
                epicfight {
                    source sourceSets.main
                }
            }
        }
		
        gameTestServer {
            workingDirectory project.file('run')
            property 'forge.enabledGameTestNamespaces', mod_id
			
            mods {
                epicfight {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
			
            mods {
                epicfight {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
    flatDir {
        dir 'libs'
    }
    
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    
    maven {
    	// location of the maven that hosts JEI files since January 2023
    	name = "Jared's maven"
   		url = "https://maven.blamejared.com/"
  	}
}

mixin {
    add sourceSets.main, "mixins.epicfight.refmap.json"
    config 'mixins.epicfight.json'
}

dependencies {
	minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    
    //implementation fg.deobf("local:epcfight:20.x.x")
    compileOnly fg.deobf("curse.maven:geckolib-388172:5675221")
    compileOnly fg.deobf("curse.maven:azurelib-817423:5500355")
    compileOnly fg.deobf("curse.maven:azurelib-armor-912767:5500370")
    
    // compile against the JEI API but do not include it at runtime
  	compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"))
 	compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}"))
  	// at runtime, use the full JEI jar for Forge
  	runtimeOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}"))
    
    compileOnly fg.deobf("curse.maven:curios-309927:5367944")
    
    implementation fg.deobf("curse.maven:octo-lib-916747:5115332")
    implementation fg.deobf("curse.maven:relics-mod-445274:5435202")
    
    implementation fg.deobf("curse.maven:embeddium-908741:5556138")
    implementation fg.deobf("curse.maven:oculus-581495:5299671")
    
    implementation fg.deobf("curse.maven:werewolves-become-a-beast-417851:5406832")
    implementation fg.deobf("curse.maven:vampirism-become-a-vampire-233029:5743414")
    
    implementation fg.deobf("curse.maven:ice-and-fire-dragons-264231:5633453")
    implementation fg.deobf("curse.maven:citadel-331936:5559513")
    
    // These mods don't allow 3rd party distribution
    compileOnly fg.deobf("local:skinlayers3d:1.6.6")
    compileOnly fg.deobf("local:firstperson:2.4.3")
    
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    // This is the preferred method to reobfuscate your jar file
    finalizedBy 'reobfJar'
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}